using  Volo.Abp;
using  Volo.Abp.Domain.Services;
using  Volo.Abp.ObjectMapping;
using  {{ context.Project.NameSpace }}.Domain.Shared;

namespace {{ context.Project.NameSpace }}.Domain;

public class {{ context.EntityModel.Code }}Manager : DomainService
{
      private readonly I{{ context.EntityModel.Code }}Repository _{{ context.EntityModel.CodeCamelCase }}Repository;
      private readonly IObjectMapper _objectMapper;
      
      public {{ context.EntityModel.Code }}Manager(I{{ context.EntityModel.Code }}Repository {{ context.EntityModel.CodeCamelCase }}Repository,IObjectMapper objectMapper)
      {
          _{{ context.EntityModel.CodeCamelCase }}Repository = {{ context.EntityModel.CodeCamelCase }}Repository;
          _objectMapper = objectMapper;
      }
      
       public async Task<List<{{ context.EntityModel.Code }}Dto>> GetListAsync(int maxResultCount = 10, int skipCount = 0)
       {
           var list = await  _{{ context.EntityModel.CodeCamelCase }}Repository.GetListAsync(maxResultCount, skipCount);
           return ObjectMapper.Map<List<{{ context.EntityModel.Code }}>, List<{{ context.EntityModel.Code }}Dto>>(list);
       }
   
       public async Task<long> GetCountAsync()
       {
           return await  _{{ context.EntityModel.CodeCamelCase }}Repository.GetCountAsync();
       }
       
        /// <summary>
        /// 创建{{ context.EntityModel.Description }}
        /// </summary>
        public async Task<{{ context.EntityModel.Code }}Dto> CreateAsync(
            Guid id
            {{-  for prop in context.EntityModel.Properties -}}
             {{- if for.first;  ",\r\n"; else; ",\r\n"; end ~}}
             {{- if prop.IsEnum ~}}
            {{ prop.EnumType.Code }}{{prop.Null}} {{ prop.CodeCamelCase }}
             {{- else ~}}
            {{ prop.DataType.Code }}{{prop.Null}} {{ prop.CodeCamelCase }}
             {{- end ~}}
            {{- if for.last; "\r\n"; else; ; end ~}}
            {{-  end ~}}
        )
        {   
            var entity = new {{ context.EntityModel.Code }}(id, {{- for prop in context.EntityModel.Properties -}}{{- if for.first;  ""; else; ","; end ~}}{{ prop.CodeCamelCase }}{{- if for.last; ""; else; ; end -}}{{- end ~}});
            entity = await  _{{ context.EntityModel.CodeCamelCase }}Repository.InsertAsync(entity);
            return _objectMapper.Map<{{ context.EntityModel.Code }}, {{ context.EntityModel.Code }}Dto>(entity);            
        }   
        
        /// <summary>
        /// 更新{{ context.EntityModel.Description }}
        /// </summary>
        public async Task<{{ context.EntityModel.Code }}Dto> UpdateAsync(
            Guid id
            {{-  for prop in context.EntityModel.Properties -}}
             {{- if for.first;  ",\r\n"; else; ",\r\n"; end ~}}
             {{- if prop.IsEnum ~}}
            {{ prop.EnumType.Code }}{{prop.Null}} {{ prop.CodeCamelCase }}
             {{- else ~}}
            {{ prop.DataType.Code }}{{prop.Null}} {{ prop.CodeCamelCase }}
             {{- end ~}}
           {{- if for.last; "\r\n"; else; ; end ~}}
            {{-  end ~}}
        )
        {
            var entity = await  _{{ context.EntityModel.CodeCamelCase }}Repository.FindAsync(id);
            if (entity == null) throw new UserFriendlyException($"{{ context.EntityModel.Description }}不存在");
            entity.Update({{- for prop in context.EntityModel.Properties -}}{{- if for.first;  ""; else; ","; end ~}}{{ prop.CodeCamelCase }}{{- if for.last; ""; else; ; end -}}{{- end ~}});
            entity = await  _{{ context.EntityModel.CodeCamelCase }}Repository.UpdateAsync(entity);
            return _objectMapper.Map<{{ context.EntityModel.Code }}, {{ context.EntityModel.Code }}Dto>(entity);            
        }     

        /// <summary>
        /// 删除{{ context.EntityModel.Description }}
        /// </summary>
        public async Task DeleteAsync(Guid id)
        {
            var entity = await  _{{ context.EntityModel.CodeCamelCase }}Repository.FindAsync(id);
            if (entity == null) throw new UserFriendlyException($"{{ context.EntityModel.Description }}不存在");
            await  _{{ context.EntityModel.CodeCamelCase }}Repository.DeleteAsync(entity);          
        }         
                         
}